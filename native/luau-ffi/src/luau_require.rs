/* automatically generated by rust-bindgen 0.71.1 */

use super::luau::*;

pub const luarequire_NavigateResult_NAVIGATE_SUCCESS: luarequire_NavigateResult = 0;
pub const luarequire_NavigateResult_NAVIGATE_AMBIGUOUS: luarequire_NavigateResult = 1;
pub const luarequire_NavigateResult_NAVIGATE_NOT_FOUND: luarequire_NavigateResult = 2;
pub type luarequire_NavigateResult = ::std::os::raw::c_uint;
pub const luarequire_WriteResult_WRITE_SUCCESS: luarequire_WriteResult = 0;
pub const luarequire_WriteResult_WRITE_BUFFER_TOO_SMALL: luarequire_WriteResult = 1;
pub const luarequire_WriteResult_WRITE_FAILURE: luarequire_WriteResult = 2;
pub type luarequire_WriteResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct luarequire_Configuration {
    pub is_require_allowed: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            requirer_chunkname: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub reset: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            requirer_chunkname: *const ::std::os::raw::c_char,
        ) -> luarequire_NavigateResult,
    >,
    pub jump_to_alias: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            path: *const ::std::os::raw::c_char,
        ) -> luarequire_NavigateResult,
    >,
    pub to_parent: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
        ) -> luarequire_NavigateResult,
    >,
    pub to_child: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> luarequire_NavigateResult,
    >,
    pub is_module_present: ::std::option::Option<
        unsafe extern "C" fn(L: *mut lua_State, ctx: *mut ::std::os::raw::c_void) -> bool,
    >,
    pub get_chunkname: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_char,
            buffer_size: usize,
            size_out: *mut usize,
        ) -> luarequire_WriteResult,
    >,
    pub get_loadname: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_char,
            buffer_size: usize,
            size_out: *mut usize,
        ) -> luarequire_WriteResult,
    >,
    pub get_cache_key: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_char,
            buffer_size: usize,
            size_out: *mut usize,
        ) -> luarequire_WriteResult,
    >,
    pub is_config_present: ::std::option::Option<
        unsafe extern "C" fn(L: *mut lua_State, ctx: *mut ::std::os::raw::c_void) -> bool,
    >,
    pub get_alias: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            alias: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            buffer_size: usize,
            size_out: *mut usize,
        ) -> luarequire_WriteResult,
    >,
    pub get_config: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_char,
            buffer_size: usize,
            size_out: *mut usize,
        ) -> luarequire_WriteResult,
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(
            L: *mut lua_State,
            ctx: *mut ::std::os::raw::c_void,
            path: *const ::std::os::raw::c_char,
            chunkname: *const ::std::os::raw::c_char,
            loadname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of luarequire_Configuration"]
        [::std::mem::size_of::<luarequire_Configuration>() - 104usize];
    ["Alignment of luarequire_Configuration"]
        [::std::mem::align_of::<luarequire_Configuration>() - 8usize];
    ["Offset of field: luarequire_Configuration::is_require_allowed"]
        [::std::mem::offset_of!(luarequire_Configuration, is_require_allowed) - 0usize];
    ["Offset of field: luarequire_Configuration::reset"]
        [::std::mem::offset_of!(luarequire_Configuration, reset) - 8usize];
    ["Offset of field: luarequire_Configuration::jump_to_alias"]
        [::std::mem::offset_of!(luarequire_Configuration, jump_to_alias) - 16usize];
    ["Offset of field: luarequire_Configuration::to_parent"]
        [::std::mem::offset_of!(luarequire_Configuration, to_parent) - 24usize];
    ["Offset of field: luarequire_Configuration::to_child"]
        [::std::mem::offset_of!(luarequire_Configuration, to_child) - 32usize];
    ["Offset of field: luarequire_Configuration::is_module_present"]
        [::std::mem::offset_of!(luarequire_Configuration, is_module_present) - 40usize];
    ["Offset of field: luarequire_Configuration::get_chunkname"]
        [::std::mem::offset_of!(luarequire_Configuration, get_chunkname) - 48usize];
    ["Offset of field: luarequire_Configuration::get_loadname"]
        [::std::mem::offset_of!(luarequire_Configuration, get_loadname) - 56usize];
    ["Offset of field: luarequire_Configuration::get_cache_key"]
        [::std::mem::offset_of!(luarequire_Configuration, get_cache_key) - 64usize];
    ["Offset of field: luarequire_Configuration::is_config_present"]
        [::std::mem::offset_of!(luarequire_Configuration, is_config_present) - 72usize];
    ["Offset of field: luarequire_Configuration::get_alias"]
        [::std::mem::offset_of!(luarequire_Configuration, get_alias) - 80usize];
    ["Offset of field: luarequire_Configuration::get_config"]
        [::std::mem::offset_of!(luarequire_Configuration, get_config) - 88usize];
    ["Offset of field: luarequire_Configuration::load"]
        [::std::mem::offset_of!(luarequire_Configuration, load) - 96usize];
};
pub type luarequire_Configuration_init =
    ::std::option::Option<unsafe extern "C" fn(config: *mut luarequire_Configuration)>;
unsafe extern "C" {
    pub fn luarequire_pushrequire(
        L: *mut lua_State,
        config_init: luarequire_Configuration_init,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_require(
        L: *mut lua_State,
        config_init: luarequire_Configuration_init,
        ctx: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn luarequire_pushproxyrequire(
        L: *mut lua_State,
        config_init: luarequire_Configuration_init,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luarequire_registermodule(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luarequire_clearcacheentry(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luarequire_clearcache(L: *mut lua_State) -> ::std::os::raw::c_int;
}
