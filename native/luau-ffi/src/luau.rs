/* automatically generated by rust-bindgen 0.71.1 */

pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __has_bounds_safety_attributes: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const LUA_USE_LONGJMP: u32 = 0;
pub const LUA_IDSIZE: u32 = 256;
pub const LUA_MINSTACK: u32 = 20;
pub const LUAI_MAXCSTACK: u32 = 8000;
pub const LUAI_MAXCALLS: u32 = 20000;
pub const LUAI_MAXCCALLS: u32 = 200;
pub const LUA_BUFFERSIZE: u32 = 512;
pub const LUA_UTAG_LIMIT: u32 = 128;
pub const LUA_LUTAG_LIMIT: u32 = 128;
pub const LUA_SIZECLASSES: u32 = 40;
pub const LUA_MEMORY_CATEGORIES: u32 = 256;
pub const LUA_MINSTRTABSIZE: u32 = 32;
pub const LUA_MAXCAPTURES: u32 = 32;
pub const LUA_VECTOR_SIZE: u32 = 3;
pub const LUA_EXTRA_SIZE: u32 = 1;
pub const LUA_MULTRET: i32 = -1;
pub const LUA_REGISTRYINDEX: i32 = -10000;
pub const LUA_ENVIRONINDEX: i32 = -10001;
pub const LUA_GLOBALSINDEX: i32 = -10002;
pub const LUA_TNONE: i32 = -1;
pub const LUA_NOREF: i32 = -1;
pub const LUA_REFNIL: u32 = 0;
pub const LUA_COLIBNAME: &[u8; 10] = b"coroutine\0";
pub const LUA_TABLIBNAME: &[u8; 6] = b"table\0";
pub const LUA_OSLIBNAME: &[u8; 3] = b"os\0";
pub const LUA_STRLIBNAME: &[u8; 7] = b"string\0";
pub const LUA_BITLIBNAME: &[u8; 6] = b"bit32\0";
pub const LUA_BUFFERLIBNAME: &[u8; 7] = b"buffer\0";
pub const LUA_UTF8LIBNAME: &[u8; 5] = b"utf8\0";
pub const LUA_MATHLIBNAME: &[u8; 5] = b"math\0";
pub const LUA_DBLIBNAME: &[u8; 6] = b"debug\0";
pub const LUA_VECLIBNAME: &[u8; 7] = b"vector\0";
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const lua_Status_LUA_OK: lua_Status = 0;
pub const lua_Status_LUA_YIELD: lua_Status = 1;
pub const lua_Status_LUA_ERRRUN: lua_Status = 2;
pub const lua_Status_LUA_ERRSYNTAX: lua_Status = 3;
pub const lua_Status_LUA_ERRMEM: lua_Status = 4;
pub const lua_Status_LUA_ERRERR: lua_Status = 5;
pub const lua_Status_LUA_BREAK: lua_Status = 6;
pub type lua_Status = ::std::os::raw::c_uint;
pub const lua_CoStatus_LUA_CORUN: lua_CoStatus = 0;
pub const lua_CoStatus_LUA_COSUS: lua_CoStatus = 1;
pub const lua_CoStatus_LUA_CONOR: lua_CoStatus = 2;
pub const lua_CoStatus_LUA_COFIN: lua_CoStatus = 3;
pub const lua_CoStatus_LUA_COERR: lua_CoStatus = 4;
pub type lua_CoStatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_State {
    _unused: [u8; 0],
}
pub type lua_CFunction =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State) -> ::std::os::raw::c_int>;
pub type lua_Continuation = ::std::option::Option<
    unsafe extern "C" fn(L: *mut lua_State, status: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type lua_Alloc = ::std::option::Option<
    unsafe extern "C" fn(
        ud: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        osize: usize,
        nsize: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub const lua_Type_LUA_TNIL: lua_Type = 0;
pub const lua_Type_LUA_TBOOLEAN: lua_Type = 1;
pub const lua_Type_LUA_TLIGHTUSERDATA: lua_Type = 2;
pub const lua_Type_LUA_TNUMBER: lua_Type = 3;
pub const lua_Type_LUA_TVECTOR: lua_Type = 4;
pub const lua_Type_LUA_TSTRING: lua_Type = 5;
pub const lua_Type_LUA_TTABLE: lua_Type = 6;
pub const lua_Type_LUA_TFUNCTION: lua_Type = 7;
pub const lua_Type_LUA_TUSERDATA: lua_Type = 8;
pub const lua_Type_LUA_TTHREAD: lua_Type = 9;
pub const lua_Type_LUA_TBUFFER: lua_Type = 10;
pub const lua_Type_LUA_TPROTO: lua_Type = 11;
pub const lua_Type_LUA_TUPVAL: lua_Type = 12;
pub const lua_Type_LUA_TDEADKEY: lua_Type = 13;
pub const lua_Type_LUA_T_COUNT: lua_Type = 11;
pub type lua_Type = ::std::os::raw::c_uint;
pub type lua_Number = f64;
pub type lua_Integer = ::std::os::raw::c_int;
pub type lua_Unsigned = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn lua_newstate(f: lua_Alloc, ud: *mut ::std::os::raw::c_void) -> *mut lua_State;
}
unsafe extern "C" {
    pub fn lua_close(L: *mut lua_State);
}
unsafe extern "C" {
    pub fn lua_newthread(L: *mut lua_State) -> *mut lua_State;
}
unsafe extern "C" {
    pub fn lua_mainthread(L: *mut lua_State) -> *mut lua_State;
}
unsafe extern "C" {
    pub fn lua_resetthread(L: *mut lua_State);
}
unsafe extern "C" {
    pub fn lua_isthreadreset(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_absindex(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_gettop(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_settop(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_pushvalue(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_remove(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_insert(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_replace(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_checkstack(L: *mut lua_State, sz: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawcheckstack(L: *mut lua_State, sz: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_xmove(from: *mut lua_State, to: *mut lua_State, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_xpush(from: *mut lua_State, to: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_isnumber(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_isstring(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_iscfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_isLfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_isuserdata(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_type(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_typename(
        L: *mut lua_State,
        tp: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_equal(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawequal(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_lessthan(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tonumberx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> f64;
}
unsafe extern "C" {
    pub fn lua_tointegerx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tounsignedx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn lua_tovector(L: *mut lua_State, idx: ::std::os::raw::c_int) -> *const f32;
}
unsafe extern "C" {
    pub fn lua_toboolean(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tolstring(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_tostringatom(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        atom: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_tolstringatom(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut usize,
        atom: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_namecallatom(
        L: *mut lua_State,
        atom: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_objlen(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tocfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> lua_CFunction;
}
unsafe extern "C" {
    pub fn lua_tolightuserdata(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_tolightuserdatatagged(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_touserdata(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_touserdatatagged(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_userdatatag(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_lightuserdatatag(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tothread(L: *mut lua_State, idx: ::std::os::raw::c_int) -> *mut lua_State;
}
unsafe extern "C" {
    pub fn lua_tobuffer(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_topointer(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_pushnil(L: *mut lua_State);
}
unsafe extern "C" {
    pub fn lua_pushnumber(L: *mut lua_State, n: f64);
}
unsafe extern "C" {
    pub fn lua_pushinteger(L: *mut lua_State, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_pushunsigned(L: *mut lua_State, n: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn lua_pushvector(L: *mut lua_State, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn lua_pushlstring(L: *mut lua_State, s: *const ::std::os::raw::c_char, l: usize);
}
unsafe extern "C" {
    pub fn lua_pushstring(L: *mut lua_State, s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn lua_pushvfstring(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        argp: va_list,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_pushfstringL(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_pushcclosurek(
        L: *mut lua_State,
        fn_: lua_CFunction,
        debugname: *const ::std::os::raw::c_char,
        nup: ::std::os::raw::c_int,
        cont: lua_Continuation,
    );
}
unsafe extern "C" {
    pub fn lua_pushboolean(L: *mut lua_State, b: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_pushthread(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_pushlightuserdatatagged(
        L: *mut lua_State,
        p: *mut ::std::os::raw::c_void,
        tag: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_newuserdatatagged(
        L: *mut lua_State,
        sz: usize,
        tag: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_newuserdatataggedwithmetatable(
        L: *mut lua_State,
        sz: usize,
        tag: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_newuserdatadtor(
        L: *mut lua_State,
        sz: usize,
        dtor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_newbuffer(L: *mut lua_State, sz: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_gettable(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawgetfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawget(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawgeti(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_createtable(
        L: *mut lua_State,
        narr: ::std::os::raw::c_int,
        nrec: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_setreadonly(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        enabled: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_getreadonly(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_setsafeenv(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        enabled: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_getmetatable(
        L: *mut lua_State,
        objindex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getfenv(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_settable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_setfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn lua_rawsetfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn lua_rawset(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_rawseti(L: *mut lua_State, idx: ::std::os::raw::c_int, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_setmetatable(
        L: *mut lua_State,
        objindex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_setfenv(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luau_load(
        L: *mut lua_State,
        chunkname: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        size: usize,
        env: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_call(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_pcall(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
        errfunc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_yield(L: *mut lua_State, nresults: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_break(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_resume(
        L: *mut lua_State,
        from: *mut lua_State,
        narg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_resumeerror(L: *mut lua_State, from: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_status(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_isyieldable(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getthreaddata(L: *mut lua_State) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_setthreaddata(L: *mut lua_State, data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn lua_costatus(L: *mut lua_State, co: *mut lua_State) -> ::std::os::raw::c_int;
}
pub const lua_GCOp_LUA_GCSTOP: lua_GCOp = 0;
pub const lua_GCOp_LUA_GCRESTART: lua_GCOp = 1;
pub const lua_GCOp_LUA_GCCOLLECT: lua_GCOp = 2;
pub const lua_GCOp_LUA_GCCOUNT: lua_GCOp = 3;
pub const lua_GCOp_LUA_GCCOUNTB: lua_GCOp = 4;
pub const lua_GCOp_LUA_GCISRUNNING: lua_GCOp = 5;
pub const lua_GCOp_LUA_GCSTEP: lua_GCOp = 6;
pub const lua_GCOp_LUA_GCSETGOAL: lua_GCOp = 7;
pub const lua_GCOp_LUA_GCSETSTEPMUL: lua_GCOp = 8;
pub const lua_GCOp_LUA_GCSETSTEPSIZE: lua_GCOp = 9;
pub type lua_GCOp = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn lua_gc(
        L: *mut lua_State,
        what: ::std::os::raw::c_int,
        data: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_setmemcat(L: *mut lua_State, category: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_totalbytes(L: *mut lua_State, category: ::std::os::raw::c_int) -> usize;
}
unsafe extern "C" {
    pub fn lua_error(L: *mut lua_State) -> !;
}
unsafe extern "C" {
    pub fn lua_next(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawiter(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        iter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_concat(L: *mut lua_State, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_encodepointer(L: *mut lua_State, p: usize) -> usize;
}
unsafe extern "C" {
    pub fn lua_clock() -> f64;
}
unsafe extern "C" {
    pub fn lua_setuserdatatag(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
    );
}
pub type lua_Destructor = ::std::option::Option<
    unsafe extern "C" fn(L: *mut lua_State, userdata: *mut ::std::os::raw::c_void),
>;
unsafe extern "C" {
    pub fn lua_setuserdatadtor(L: *mut lua_State, tag: ::std::os::raw::c_int, dtor: lua_Destructor);
}
unsafe extern "C" {
    pub fn lua_getuserdatadtor(L: *mut lua_State, tag: ::std::os::raw::c_int) -> lua_Destructor;
}
unsafe extern "C" {
    pub fn lua_setuserdatametatable(L: *mut lua_State, tag: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_getuserdatametatable(L: *mut lua_State, tag: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_setlightuserdataname(
        L: *mut lua_State,
        tag: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn lua_getlightuserdataname(
        L: *mut lua_State,
        tag: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_clonefunction(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_cleartable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_clonetable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_getallocf(L: *mut lua_State, ud: *mut *mut ::std::os::raw::c_void) -> lua_Alloc;
}
unsafe extern "C" {
    pub fn lua_ref(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_unref(L: *mut lua_State, ref_: ::std::os::raw::c_int);
}
pub type lua_Hook =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>;
unsafe extern "C" {
    pub fn lua_stackdepth(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getinfo(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        what: *const ::std::os::raw::c_char,
        ar: *mut lua_Debug,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getargument(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getlocal(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_setlocal(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_getupvalue(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_setupvalue(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_singlestep(L: *mut lua_State, enabled: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_breakpoint(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
        enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type lua_Coverage = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        function: *const ::std::os::raw::c_char,
        linedefined: ::std::os::raw::c_int,
        depth: ::std::os::raw::c_int,
        hits: *const ::std::os::raw::c_int,
        size: usize,
    ),
>;
unsafe extern "C" {
    pub fn lua_getcoverage(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        context: *mut ::std::os::raw::c_void,
        callback: lua_Coverage,
    );
}
unsafe extern "C" {
    pub fn lua_debugtrace(L: *mut lua_State) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_Debug {
    pub name: *const ::std::os::raw::c_char,
    pub what: *const ::std::os::raw::c_char,
    pub source: *const ::std::os::raw::c_char,
    pub short_src: *const ::std::os::raw::c_char,
    pub linedefined: ::std::os::raw::c_int,
    pub currentline: ::std::os::raw::c_int,
    pub nupvals: ::std::os::raw::c_uchar,
    pub nparams: ::std::os::raw::c_uchar,
    pub isvararg: ::std::os::raw::c_char,
    pub userdata: *mut ::std::os::raw::c_void,
    pub ssbuf: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lua_Debug"][::std::mem::size_of::<lua_Debug>() - 312usize];
    ["Alignment of lua_Debug"][::std::mem::align_of::<lua_Debug>() - 8usize];
    ["Offset of field: lua_Debug::name"][::std::mem::offset_of!(lua_Debug, name) - 0usize];
    ["Offset of field: lua_Debug::what"][::std::mem::offset_of!(lua_Debug, what) - 8usize];
    ["Offset of field: lua_Debug::source"][::std::mem::offset_of!(lua_Debug, source) - 16usize];
    ["Offset of field: lua_Debug::short_src"]
        [::std::mem::offset_of!(lua_Debug, short_src) - 24usize];
    ["Offset of field: lua_Debug::linedefined"]
        [::std::mem::offset_of!(lua_Debug, linedefined) - 32usize];
    ["Offset of field: lua_Debug::currentline"]
        [::std::mem::offset_of!(lua_Debug, currentline) - 36usize];
    ["Offset of field: lua_Debug::nupvals"][::std::mem::offset_of!(lua_Debug, nupvals) - 40usize];
    ["Offset of field: lua_Debug::nparams"][::std::mem::offset_of!(lua_Debug, nparams) - 41usize];
    ["Offset of field: lua_Debug::isvararg"][::std::mem::offset_of!(lua_Debug, isvararg) - 42usize];
    ["Offset of field: lua_Debug::userdata"][::std::mem::offset_of!(lua_Debug, userdata) - 48usize];
    ["Offset of field: lua_Debug::ssbuf"][::std::mem::offset_of!(lua_Debug, ssbuf) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_Callbacks {
    pub userdata: *mut ::std::os::raw::c_void,
    pub interrupt:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, gc: ::std::os::raw::c_int)>,
    pub panic: ::std::option::Option<
        unsafe extern "C" fn(L: *mut lua_State, errcode: ::std::os::raw::c_int),
    >,
    pub userthread:
        ::std::option::Option<unsafe extern "C" fn(LP: *mut lua_State, L: *mut lua_State)>,
    pub useratom: ::std::option::Option<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char, l: usize) -> i16,
    >,
    pub debugbreak:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>,
    pub debugstep:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>,
    pub debuginterrupt:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>,
    pub debugprotectederror: ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State)>,
    pub onallocate:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, osize: usize, nsize: usize)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lua_Callbacks"][::std::mem::size_of::<lua_Callbacks>() - 80usize];
    ["Alignment of lua_Callbacks"][::std::mem::align_of::<lua_Callbacks>() - 8usize];
    ["Offset of field: lua_Callbacks::userdata"]
        [::std::mem::offset_of!(lua_Callbacks, userdata) - 0usize];
    ["Offset of field: lua_Callbacks::interrupt"]
        [::std::mem::offset_of!(lua_Callbacks, interrupt) - 8usize];
    ["Offset of field: lua_Callbacks::panic"]
        [::std::mem::offset_of!(lua_Callbacks, panic) - 16usize];
    ["Offset of field: lua_Callbacks::userthread"]
        [::std::mem::offset_of!(lua_Callbacks, userthread) - 24usize];
    ["Offset of field: lua_Callbacks::useratom"]
        [::std::mem::offset_of!(lua_Callbacks, useratom) - 32usize];
    ["Offset of field: lua_Callbacks::debugbreak"]
        [::std::mem::offset_of!(lua_Callbacks, debugbreak) - 40usize];
    ["Offset of field: lua_Callbacks::debugstep"]
        [::std::mem::offset_of!(lua_Callbacks, debugstep) - 48usize];
    ["Offset of field: lua_Callbacks::debuginterrupt"]
        [::std::mem::offset_of!(lua_Callbacks, debuginterrupt) - 56usize];
    ["Offset of field: lua_Callbacks::debugprotectederror"]
        [::std::mem::offset_of!(lua_Callbacks, debugprotectederror) - 64usize];
    ["Offset of field: lua_Callbacks::onallocate"]
        [::std::mem::offset_of!(lua_Callbacks, onallocate) - 72usize];
};
unsafe extern "C" {
    pub fn lua_callbacks(L: *mut lua_State) -> *mut lua_Callbacks;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct luaL_Reg {
    pub name: *const ::std::os::raw::c_char,
    pub func: lua_CFunction,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of luaL_Reg"][::std::mem::size_of::<luaL_Reg>() - 16usize];
    ["Alignment of luaL_Reg"][::std::mem::align_of::<luaL_Reg>() - 8usize];
    ["Offset of field: luaL_Reg::name"][::std::mem::offset_of!(luaL_Reg, name) - 0usize];
    ["Offset of field: luaL_Reg::func"][::std::mem::offset_of!(luaL_Reg, func) - 8usize];
};
unsafe extern "C" {
    pub fn luaL_register(
        L: *mut lua_State,
        libname: *const ::std::os::raw::c_char,
        l: *const luaL_Reg,
    );
}
unsafe extern "C" {
    pub fn luaL_getmetafield(
        L: *mut lua_State,
        obj: ::std::os::raw::c_int,
        e: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_callmeta(
        L: *mut lua_State,
        obj: ::std::os::raw::c_int,
        e: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_typeerrorL(
        L: *mut lua_State,
        narg: ::std::os::raw::c_int,
        tname: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn luaL_argerrorL(
        L: *mut lua_State,
        narg: ::std::os::raw::c_int,
        extramsg: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn luaL_checklstring(
        L: *mut lua_State,
        numArg: ::std::os::raw::c_int,
        l: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn luaL_optlstring(
        L: *mut lua_State,
        numArg: ::std::os::raw::c_int,
        def: *const ::std::os::raw::c_char,
        l: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn luaL_checknumber(L: *mut lua_State, numArg: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn luaL_optnumber(L: *mut lua_State, nArg: ::std::os::raw::c_int, def: f64) -> f64;
}
unsafe extern "C" {
    pub fn luaL_checkboolean(
        L: *mut lua_State,
        narg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_optboolean(
        L: *mut lua_State,
        narg: ::std::os::raw::c_int,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_checkinteger(
        L: *mut lua_State,
        numArg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_optinteger(
        L: *mut lua_State,
        nArg: ::std::os::raw::c_int,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_checkunsigned(
        L: *mut lua_State,
        numArg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn luaL_optunsigned(
        L: *mut lua_State,
        numArg: ::std::os::raw::c_int,
        def: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn luaL_checkvector(L: *mut lua_State, narg: ::std::os::raw::c_int) -> *const f32;
}
unsafe extern "C" {
    pub fn luaL_optvector(
        L: *mut lua_State,
        narg: ::std::os::raw::c_int,
        def: *const f32,
    ) -> *const f32;
}
unsafe extern "C" {
    pub fn luaL_checkstack(
        L: *mut lua_State,
        sz: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn luaL_checktype(L: *mut lua_State, narg: ::std::os::raw::c_int, t: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn luaL_checkany(L: *mut lua_State, narg: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn luaL_newmetatable(
        L: *mut lua_State,
        tname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_checkudata(
        L: *mut lua_State,
        ud: ::std::os::raw::c_int,
        tname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn luaL_checkbuffer(
        L: *mut lua_State,
        narg: ::std::os::raw::c_int,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn luaL_where(L: *mut lua_State, lvl: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn luaL_errorL(L: *mut lua_State, fmt: *const ::std::os::raw::c_char, ...) -> !;
}
unsafe extern "C" {
    pub fn luaL_checkoption(
        L: *mut lua_State,
        narg: ::std::os::raw::c_int,
        def: *const ::std::os::raw::c_char,
        lst: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_tolstring(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn luaL_newstate() -> *mut lua_State;
}
unsafe extern "C" {
    pub fn luaL_findtable(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
        szhint: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn luaL_typename(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn luaL_callyieldable(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct luaL_Strbuf {
    pub p: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
    pub L: *mut lua_State,
    pub storage: *mut TString,
    pub buffer: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of luaL_Strbuf"][::std::mem::size_of::<luaL_Strbuf>() - 544usize];
    ["Alignment of luaL_Strbuf"][::std::mem::align_of::<luaL_Strbuf>() - 8usize];
    ["Offset of field: luaL_Strbuf::p"][::std::mem::offset_of!(luaL_Strbuf, p) - 0usize];
    ["Offset of field: luaL_Strbuf::end"][::std::mem::offset_of!(luaL_Strbuf, end) - 8usize];
    ["Offset of field: luaL_Strbuf::L"][::std::mem::offset_of!(luaL_Strbuf, L) - 16usize];
    ["Offset of field: luaL_Strbuf::storage"]
        [::std::mem::offset_of!(luaL_Strbuf, storage) - 24usize];
    ["Offset of field: luaL_Strbuf::buffer"][::std::mem::offset_of!(luaL_Strbuf, buffer) - 32usize];
};
pub type luaL_Buffer = luaL_Strbuf;
unsafe extern "C" {
    pub fn luaL_buffinit(L: *mut lua_State, B: *mut luaL_Strbuf);
}
unsafe extern "C" {
    pub fn luaL_buffinitsize(
        L: *mut lua_State,
        B: *mut luaL_Strbuf,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn luaL_prepbuffsize(B: *mut luaL_Buffer, size: usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn luaL_addlstring(B: *mut luaL_Strbuf, s: *const ::std::os::raw::c_char, l: usize);
}
unsafe extern "C" {
    pub fn luaL_addvalue(B: *mut luaL_Strbuf);
}
unsafe extern "C" {
    pub fn luaL_addvalueany(B: *mut luaL_Strbuf, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn luaL_pushresult(B: *mut luaL_Strbuf);
}
unsafe extern "C" {
    pub fn luaL_pushresultsize(B: *mut luaL_Strbuf, size: usize);
}
unsafe extern "C" {
    pub fn luaopen_base(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_coroutine(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_table(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_os(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_string(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_bit32(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_buffer(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_utf8(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_math(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_debug(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaopen_vector(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luaL_openlibs(L: *mut lua_State);
}
unsafe extern "C" {
    pub fn luaL_sandbox(L: *mut lua_State);
}
unsafe extern "C" {
    pub fn luaL_sandboxthread(L: *mut lua_State);
}
pub type rsize_t = ::std::os::raw::c_ulong;
pub type lua_CompileConstant = *mut ::std::os::raw::c_void;
pub type lua_LibraryMemberTypeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        library: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type lua_LibraryMemberConstantCallback = ::std::option::Option<
    unsafe extern "C" fn(
        library: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        constant: *mut lua_CompileConstant,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_CompileOptions {
    pub optimizationLevel: ::std::os::raw::c_int,
    pub debugLevel: ::std::os::raw::c_int,
    pub typeInfoLevel: ::std::os::raw::c_int,
    pub coverageLevel: ::std::os::raw::c_int,
    pub vectorLib: *const ::std::os::raw::c_char,
    pub vectorCtor: *const ::std::os::raw::c_char,
    pub vectorType: *const ::std::os::raw::c_char,
    pub mutableGlobals: *const *const ::std::os::raw::c_char,
    pub userdataTypes: *const *const ::std::os::raw::c_char,
    pub librariesWithKnownMembers: *const *const ::std::os::raw::c_char,
    pub libraryMemberTypeCb: lua_LibraryMemberTypeCallback,
    pub libraryMemberConstantCb: lua_LibraryMemberConstantCallback,
    pub disabledBuiltins: *const *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lua_CompileOptions"][::std::mem::size_of::<lua_CompileOptions>() - 88usize];
    ["Alignment of lua_CompileOptions"][::std::mem::align_of::<lua_CompileOptions>() - 8usize];
    ["Offset of field: lua_CompileOptions::optimizationLevel"]
        [::std::mem::offset_of!(lua_CompileOptions, optimizationLevel) - 0usize];
    ["Offset of field: lua_CompileOptions::debugLevel"]
        [::std::mem::offset_of!(lua_CompileOptions, debugLevel) - 4usize];
    ["Offset of field: lua_CompileOptions::typeInfoLevel"]
        [::std::mem::offset_of!(lua_CompileOptions, typeInfoLevel) - 8usize];
    ["Offset of field: lua_CompileOptions::coverageLevel"]
        [::std::mem::offset_of!(lua_CompileOptions, coverageLevel) - 12usize];
    ["Offset of field: lua_CompileOptions::vectorLib"]
        [::std::mem::offset_of!(lua_CompileOptions, vectorLib) - 16usize];
    ["Offset of field: lua_CompileOptions::vectorCtor"]
        [::std::mem::offset_of!(lua_CompileOptions, vectorCtor) - 24usize];
    ["Offset of field: lua_CompileOptions::vectorType"]
        [::std::mem::offset_of!(lua_CompileOptions, vectorType) - 32usize];
    ["Offset of field: lua_CompileOptions::mutableGlobals"]
        [::std::mem::offset_of!(lua_CompileOptions, mutableGlobals) - 40usize];
    ["Offset of field: lua_CompileOptions::userdataTypes"]
        [::std::mem::offset_of!(lua_CompileOptions, userdataTypes) - 48usize];
    ["Offset of field: lua_CompileOptions::librariesWithKnownMembers"]
        [::std::mem::offset_of!(lua_CompileOptions, librariesWithKnownMembers) - 56usize];
    ["Offset of field: lua_CompileOptions::libraryMemberTypeCb"]
        [::std::mem::offset_of!(lua_CompileOptions, libraryMemberTypeCb) - 64usize];
    ["Offset of field: lua_CompileOptions::libraryMemberConstantCb"]
        [::std::mem::offset_of!(lua_CompileOptions, libraryMemberConstantCb) - 72usize];
    ["Offset of field: lua_CompileOptions::disabledBuiltins"]
        [::std::mem::offset_of!(lua_CompileOptions, disabledBuiltins) - 80usize];
};
unsafe extern "C" {
    pub fn luau_compile(
        source: *const ::std::os::raw::c_char,
        size: usize,
        options: *mut lua_CompileOptions,
        outsize: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn luau_set_compile_constant_nil(constant: *mut lua_CompileConstant);
}
unsafe extern "C" {
    pub fn luau_set_compile_constant_boolean(
        constant: *mut lua_CompileConstant,
        b: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn luau_set_compile_constant_number(constant: *mut lua_CompileConstant, n: f64);
}
unsafe extern "C" {
    pub fn luau_set_compile_constant_vector(
        constant: *mut lua_CompileConstant,
        x: f32,
        y: f32,
        z: f32,
        w: f32,
    );
}
unsafe extern "C" {
    pub fn luau_set_compile_constant_string(
        constant: *mut lua_CompileConstant,
        s: *const ::std::os::raw::c_char,
        l: usize,
    );
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TString {
    pub _address: u8,
}
