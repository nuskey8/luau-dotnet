/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;

use super::luau::*;


#[no_mangle]
pub unsafe extern "C" fn ffi_lua_newstate(
    f: lua_Alloc,
    ud: *mut c_void
) -> *mut lua_State
{
    lua_newstate(
        f,
        ud
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_close(
    L: *mut lua_State
)
{
    lua_close(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_newthread(
    L: *mut lua_State
) -> *mut lua_State
{
    lua_newthread(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_mainthread(
    L: *mut lua_State
) -> *mut lua_State
{
    lua_mainthread(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_resetthread(
    L: *mut lua_State
)
{
    lua_resetthread(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_isthreadreset(
    L: *mut lua_State
) -> c_int
{
    lua_isthreadreset(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_absindex(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_absindex(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_gettop(
    L: *mut lua_State
) -> c_int
{
    lua_gettop(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_settop(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_settop(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushvalue(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_pushvalue(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_remove(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_remove(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_insert(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_insert(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_replace(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_replace(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_checkstack(
    L: *mut lua_State,
    sz: c_int
) -> c_int
{
    lua_checkstack(
        L,
        sz
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawcheckstack(
    L: *mut lua_State,
    sz: c_int
)
{
    lua_rawcheckstack(
        L,
        sz
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_xmove(
    from: *mut lua_State,
    to: *mut lua_State,
    n: c_int
)
{
    lua_xmove(
        from,
        to,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_xpush(
    from: *mut lua_State,
    to: *mut lua_State,
    idx: c_int
)
{
    lua_xpush(
        from,
        to,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_isnumber(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_isnumber(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_isstring(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_isstring(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_iscfunction(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_iscfunction(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_isLfunction(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_isLfunction(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_isuserdata(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_isuserdata(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_type(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_type(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_typename(
    L: *mut lua_State,
    tp: c_int
) -> *const c_char
{
    lua_typename(
        L,
        tp
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_equal(
    L: *mut lua_State,
    idx1: c_int,
    idx2: c_int
) -> c_int
{
    lua_equal(
        L,
        idx1,
        idx2
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawequal(
    L: *mut lua_State,
    idx1: c_int,
    idx2: c_int
) -> c_int
{
    lua_rawequal(
        L,
        idx1,
        idx2
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_lessthan(
    L: *mut lua_State,
    idx1: c_int,
    idx2: c_int
) -> c_int
{
    lua_lessthan(
        L,
        idx1,
        idx2
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tonumberx(
    L: *mut lua_State,
    idx: c_int,
    isnum: *mut c_int
) -> f64
{
    lua_tonumberx(
        L,
        idx,
        isnum
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tointegerx(
    L: *mut lua_State,
    idx: c_int,
    isnum: *mut c_int
) -> c_int
{
    lua_tointegerx(
        L,
        idx,
        isnum
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tounsignedx(
    L: *mut lua_State,
    idx: c_int,
    isnum: *mut c_int
) -> c_uint
{
    lua_tounsignedx(
        L,
        idx,
        isnum
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tovector(
    L: *mut lua_State,
    idx: c_int
) -> *const f32
{
    lua_tovector(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_toboolean(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_toboolean(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tolstring(
    L: *mut lua_State,
    idx: c_int,
    len: *mut usize
) -> *const c_char
{
    lua_tolstring(
        L,
        idx,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tostringatom(
    L: *mut lua_State,
    idx: c_int,
    atom: *mut c_int
) -> *const c_char
{
    lua_tostringatom(
        L,
        idx,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tolstringatom(
    L: *mut lua_State,
    idx: c_int,
    len: *mut usize,
    atom: *mut c_int
) -> *const c_char
{
    lua_tolstringatom(
        L,
        idx,
        len,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_namecallatom(
    L: *mut lua_State,
    atom: *mut c_int
) -> *const c_char
{
    lua_namecallatom(
        L,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_objlen(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_objlen(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tocfunction(
    L: *mut lua_State,
    idx: c_int
) -> lua_CFunction
{
    lua_tocfunction(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tolightuserdata(
    L: *mut lua_State,
    idx: c_int
) -> *mut c_void
{
    lua_tolightuserdata(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tolightuserdatatagged(
    L: *mut lua_State,
    idx: c_int,
    tag: c_int
) -> *mut c_void
{
    lua_tolightuserdatatagged(
        L,
        idx,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_touserdata(
    L: *mut lua_State,
    idx: c_int
) -> *mut c_void
{
    lua_touserdata(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_touserdatatagged(
    L: *mut lua_State,
    idx: c_int,
    tag: c_int
) -> *mut c_void
{
    lua_touserdatatagged(
        L,
        idx,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_userdatatag(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_userdatatag(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_lightuserdatatag(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_lightuserdatatag(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tothread(
    L: *mut lua_State,
    idx: c_int
) -> *mut lua_State
{
    lua_tothread(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_tobuffer(
    L: *mut lua_State,
    idx: c_int,
    len: *mut usize
) -> *mut c_void
{
    lua_tobuffer(
        L,
        idx,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_topointer(
    L: *mut lua_State,
    idx: c_int
) -> *const c_void
{
    lua_topointer(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushnil(
    L: *mut lua_State
)
{
    lua_pushnil(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushnumber(
    L: *mut lua_State,
    n: f64
)
{
    lua_pushnumber(
        L,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushinteger(
    L: *mut lua_State,
    n: c_int
)
{
    lua_pushinteger(
        L,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushunsigned(
    L: *mut lua_State,
    n: c_uint
)
{
    lua_pushunsigned(
        L,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushvector(
    L: *mut lua_State,
    x: f32,
    y: f32,
    z: f32
)
{
    lua_pushvector(
        L,
        x,
        y,
        z
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushlstring(
    L: *mut lua_State,
    s: *const c_char,
    l: usize
)
{
    lua_pushlstring(
        L,
        s,
        l
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushstring(
    L: *mut lua_State,
    s: *const c_char
)
{
    lua_pushstring(
        L,
        s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushvfstring(
    L: *mut lua_State,
    fmt: *const c_char,
    argp: va_list
) -> *const c_char
{
    lua_pushvfstring(
        L,
        fmt,
        argp
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushfstringL(
    L: *mut lua_State,
    fmt: *const c_char
) -> *const c_char
{
    lua_pushfstringL(
        L,
        fmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushcclosurek(
    L: *mut lua_State,
    fn_: lua_CFunction,
    debugname: *const c_char,
    nup: c_int,
    cont: lua_Continuation
)
{
    lua_pushcclosurek(
        L,
        fn_,
        debugname,
        nup,
        cont
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushboolean(
    L: *mut lua_State,
    b: c_int
)
{
    lua_pushboolean(
        L,
        b
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushthread(
    L: *mut lua_State
) -> c_int
{
    lua_pushthread(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pushlightuserdatatagged(
    L: *mut lua_State,
    p: *mut c_void,
    tag: c_int
)
{
    lua_pushlightuserdatatagged(
        L,
        p,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_newuserdatatagged(
    L: *mut lua_State,
    sz: usize,
    tag: c_int
) -> *mut c_void
{
    lua_newuserdatatagged(
        L,
        sz,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_newuserdatataggedwithmetatable(
    L: *mut lua_State,
    sz: usize,
    tag: c_int
) -> *mut c_void
{
    lua_newuserdatataggedwithmetatable(
        L,
        sz,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_newuserdatadtor(
    L: *mut lua_State,
    sz: usize,
    dtor: Option<unsafe extern "C" fn(arg1: *mut c_void)>
) -> *mut c_void
{
    lua_newuserdatadtor(
        L,
        sz,
        dtor
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_newbuffer(
    L: *mut lua_State,
    sz: usize
) -> *mut c_void
{
    lua_newbuffer(
        L,
        sz
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_gettable(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_gettable(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getfield(
    L: *mut lua_State,
    idx: c_int,
    k: *const c_char
) -> c_int
{
    lua_getfield(
        L,
        idx,
        k
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawgetfield(
    L: *mut lua_State,
    idx: c_int,
    k: *const c_char
) -> c_int
{
    lua_rawgetfield(
        L,
        idx,
        k
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawget(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_rawget(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawgeti(
    L: *mut lua_State,
    idx: c_int,
    n: c_int
) -> c_int
{
    lua_rawgeti(
        L,
        idx,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_createtable(
    L: *mut lua_State,
    narr: c_int,
    nrec: c_int
)
{
    lua_createtable(
        L,
        narr,
        nrec
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setreadonly(
    L: *mut lua_State,
    idx: c_int,
    enabled: c_int
)
{
    lua_setreadonly(
        L,
        idx,
        enabled
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getreadonly(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_getreadonly(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setsafeenv(
    L: *mut lua_State,
    idx: c_int,
    enabled: c_int
)
{
    lua_setsafeenv(
        L,
        idx,
        enabled
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getmetatable(
    L: *mut lua_State,
    objindex: c_int
) -> c_int
{
    lua_getmetatable(
        L,
        objindex
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getfenv(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_getfenv(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_settable(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_settable(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setfield(
    L: *mut lua_State,
    idx: c_int,
    k: *const c_char
)
{
    lua_setfield(
        L,
        idx,
        k
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawsetfield(
    L: *mut lua_State,
    idx: c_int,
    k: *const c_char
)
{
    lua_rawsetfield(
        L,
        idx,
        k
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawset(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_rawset(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawseti(
    L: *mut lua_State,
    idx: c_int,
    n: c_int
)
{
    lua_rawseti(
        L,
        idx,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setmetatable(
    L: *mut lua_State,
    objindex: c_int
) -> c_int
{
    lua_setmetatable(
        L,
        objindex
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setfenv(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_setfenv(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luau_load(
    L: *mut lua_State,
    chunkname: *const c_char,
    data: *const c_char,
    size: usize,
    env: c_int
) -> c_int
{
    luau_load(
        L,
        chunkname,
        data,
        size,
        env
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_call(
    L: *mut lua_State,
    nargs: c_int,
    nresults: c_int
)
{
    lua_call(
        L,
        nargs,
        nresults
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_pcall(
    L: *mut lua_State,
    nargs: c_int,
    nresults: c_int,
    errfunc: c_int
) -> c_int
{
    lua_pcall(
        L,
        nargs,
        nresults,
        errfunc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_yield(
    L: *mut lua_State,
    nresults: c_int
) -> c_int
{
    lua_yield(
        L,
        nresults
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_break(
    L: *mut lua_State
) -> c_int
{
    lua_break(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_resume(
    L: *mut lua_State,
    from: *mut lua_State,
    narg: c_int
) -> c_int
{
    lua_resume(
        L,
        from,
        narg
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_resumeerror(
    L: *mut lua_State,
    from: *mut lua_State
) -> c_int
{
    lua_resumeerror(
        L,
        from
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_status(
    L: *mut lua_State
) -> c_int
{
    lua_status(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_isyieldable(
    L: *mut lua_State
) -> c_int
{
    lua_isyieldable(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getthreaddata(
    L: *mut lua_State
) -> *mut c_void
{
    lua_getthreaddata(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setthreaddata(
    L: *mut lua_State,
    data: *mut c_void
)
{
    lua_setthreaddata(
        L,
        data
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_costatus(
    L: *mut lua_State,
    co: *mut lua_State
) -> c_int
{
    lua_costatus(
        L,
        co
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_gc(
    L: *mut lua_State,
    what: c_int,
    data: c_int
) -> c_int
{
    lua_gc(
        L,
        what,
        data
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setmemcat(
    L: *mut lua_State,
    category: c_int
)
{
    lua_setmemcat(
        L,
        category
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_totalbytes(
    L: *mut lua_State,
    category: c_int
) -> usize
{
    lua_totalbytes(
        L,
        category
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_next(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_next(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_rawiter(
    L: *mut lua_State,
    idx: c_int,
    iter: c_int
) -> c_int
{
    lua_rawiter(
        L,
        idx,
        iter
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_concat(
    L: *mut lua_State,
    n: c_int
)
{
    lua_concat(
        L,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_encodepointer(
    L: *mut lua_State,
    p: usize
) -> usize
{
    lua_encodepointer(
        L,
        p
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_clock(

) -> f64
{
    lua_clock(

    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setuserdatatag(
    L: *mut lua_State,
    idx: c_int,
    tag: c_int
)
{
    lua_setuserdatatag(
        L,
        idx,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setuserdatadtor(
    L: *mut lua_State,
    tag: c_int,
    dtor: lua_Destructor
)
{
    lua_setuserdatadtor(
        L,
        tag,
        dtor
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getuserdatadtor(
    L: *mut lua_State,
    tag: c_int
) -> lua_Destructor
{
    lua_getuserdatadtor(
        L,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setuserdatametatable(
    L: *mut lua_State,
    tag: c_int
)
{
    lua_setuserdatametatable(
        L,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getuserdatametatable(
    L: *mut lua_State,
    tag: c_int
)
{
    lua_getuserdatametatable(
        L,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setlightuserdataname(
    L: *mut lua_State,
    tag: c_int,
    name: *const c_char
)
{
    lua_setlightuserdataname(
        L,
        tag,
        name
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getlightuserdataname(
    L: *mut lua_State,
    tag: c_int
) -> *const c_char
{
    lua_getlightuserdataname(
        L,
        tag
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_clonefunction(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_clonefunction(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_cleartable(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_cleartable(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_clonetable(
    L: *mut lua_State,
    idx: c_int
)
{
    lua_clonetable(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getallocf(
    L: *mut lua_State,
    ud: *mut *mut c_void
) -> lua_Alloc
{
    lua_getallocf(
        L,
        ud
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_ref(
    L: *mut lua_State,
    idx: c_int
) -> c_int
{
    lua_ref(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_unref(
    L: *mut lua_State,
    ref_: c_int
)
{
    lua_unref(
        L,
        ref_
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_stackdepth(
    L: *mut lua_State
) -> c_int
{
    lua_stackdepth(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getinfo(
    L: *mut lua_State,
    level: c_int,
    what: *const c_char,
    ar: *mut lua_Debug
) -> c_int
{
    lua_getinfo(
        L,
        level,
        what,
        ar
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getargument(
    L: *mut lua_State,
    level: c_int,
    n: c_int
) -> c_int
{
    lua_getargument(
        L,
        level,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getlocal(
    L: *mut lua_State,
    level: c_int,
    n: c_int
) -> *const c_char
{
    lua_getlocal(
        L,
        level,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setlocal(
    L: *mut lua_State,
    level: c_int,
    n: c_int
) -> *const c_char
{
    lua_setlocal(
        L,
        level,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getupvalue(
    L: *mut lua_State,
    funcindex: c_int,
    n: c_int
) -> *const c_char
{
    lua_getupvalue(
        L,
        funcindex,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_setupvalue(
    L: *mut lua_State,
    funcindex: c_int,
    n: c_int
) -> *const c_char
{
    lua_setupvalue(
        L,
        funcindex,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_singlestep(
    L: *mut lua_State,
    enabled: c_int
)
{
    lua_singlestep(
        L,
        enabled
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_breakpoint(
    L: *mut lua_State,
    funcindex: c_int,
    line: c_int,
    enabled: c_int
) -> c_int
{
    lua_breakpoint(
        L,
        funcindex,
        line,
        enabled
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_getcoverage(
    L: *mut lua_State,
    funcindex: c_int,
    context: *mut c_void,
    callback: lua_Coverage
)
{
    lua_getcoverage(
        L,
        funcindex,
        context,
        callback
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_debugtrace(
    L: *mut lua_State
) -> *const c_char
{
    lua_debugtrace(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_lua_callbacks(
    L: *mut lua_State
) -> *mut lua_Callbacks
{
    lua_callbacks(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_register(
    L: *mut lua_State,
    libname: *const c_char,
    l: *const luaL_Reg
)
{
    luaL_register(
        L,
        libname,
        l
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_getmetafield(
    L: *mut lua_State,
    obj: c_int,
    e: *const c_char
) -> c_int
{
    luaL_getmetafield(
        L,
        obj,
        e
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_callmeta(
    L: *mut lua_State,
    obj: c_int,
    e: *const c_char
) -> c_int
{
    luaL_callmeta(
        L,
        obj,
        e
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checklstring(
    L: *mut lua_State,
    numArg: c_int,
    l: *mut usize
) -> *const c_char
{
    luaL_checklstring(
        L,
        numArg,
        l
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_optlstring(
    L: *mut lua_State,
    numArg: c_int,
    def: *const c_char,
    l: *mut usize
) -> *const c_char
{
    luaL_optlstring(
        L,
        numArg,
        def,
        l
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checknumber(
    L: *mut lua_State,
    numArg: c_int
) -> f64
{
    luaL_checknumber(
        L,
        numArg
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_optnumber(
    L: *mut lua_State,
    nArg: c_int,
    def: f64
) -> f64
{
    luaL_optnumber(
        L,
        nArg,
        def
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkboolean(
    L: *mut lua_State,
    narg: c_int
) -> c_int
{
    luaL_checkboolean(
        L,
        narg
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_optboolean(
    L: *mut lua_State,
    narg: c_int,
    def: c_int
) -> c_int
{
    luaL_optboolean(
        L,
        narg,
        def
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkinteger(
    L: *mut lua_State,
    numArg: c_int
) -> c_int
{
    luaL_checkinteger(
        L,
        numArg
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_optinteger(
    L: *mut lua_State,
    nArg: c_int,
    def: c_int
) -> c_int
{
    luaL_optinteger(
        L,
        nArg,
        def
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkunsigned(
    L: *mut lua_State,
    numArg: c_int
) -> c_uint
{
    luaL_checkunsigned(
        L,
        numArg
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_optunsigned(
    L: *mut lua_State,
    numArg: c_int,
    def: c_uint
) -> c_uint
{
    luaL_optunsigned(
        L,
        numArg,
        def
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkvector(
    L: *mut lua_State,
    narg: c_int
) -> *const f32
{
    luaL_checkvector(
        L,
        narg
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_optvector(
    L: *mut lua_State,
    narg: c_int,
    def: *const f32
) -> *const f32
{
    luaL_optvector(
        L,
        narg,
        def
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkstack(
    L: *mut lua_State,
    sz: c_int,
    msg: *const c_char
)
{
    luaL_checkstack(
        L,
        sz,
        msg
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checktype(
    L: *mut lua_State,
    narg: c_int,
    t: c_int
)
{
    luaL_checktype(
        L,
        narg,
        t
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkany(
    L: *mut lua_State,
    narg: c_int
)
{
    luaL_checkany(
        L,
        narg
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_newmetatable(
    L: *mut lua_State,
    tname: *const c_char
) -> c_int
{
    luaL_newmetatable(
        L,
        tname
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkudata(
    L: *mut lua_State,
    ud: c_int,
    tname: *const c_char
) -> *mut c_void
{
    luaL_checkudata(
        L,
        ud,
        tname
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkbuffer(
    L: *mut lua_State,
    narg: c_int,
    len: *mut usize
) -> *mut c_void
{
    luaL_checkbuffer(
        L,
        narg,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_where(
    L: *mut lua_State,
    lvl: c_int
)
{
    luaL_where(
        L,
        lvl
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_checkoption(
    L: *mut lua_State,
    narg: c_int,
    def: *const c_char,
    lst: *const *const c_char
) -> c_int
{
    luaL_checkoption(
        L,
        narg,
        def,
        lst
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_tolstring(
    L: *mut lua_State,
    idx: c_int,
    len: *mut usize
) -> *const c_char
{
    luaL_tolstring(
        L,
        idx,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_newstate(

) -> *mut lua_State
{
    luaL_newstate(

    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_findtable(
    L: *mut lua_State,
    idx: c_int,
    fname: *const c_char,
    szhint: c_int
) -> *const c_char
{
    luaL_findtable(
        L,
        idx,
        fname,
        szhint
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_typename(
    L: *mut lua_State,
    idx: c_int
) -> *const c_char
{
    luaL_typename(
        L,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_callyieldable(
    L: *mut lua_State,
    nargs: c_int,
    nresults: c_int
) -> c_int
{
    luaL_callyieldable(
        L,
        nargs,
        nresults
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_buffinit(
    L: *mut lua_State,
    B: *mut luaL_Strbuf
)
{
    luaL_buffinit(
        L,
        B
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_buffinitsize(
    L: *mut lua_State,
    B: *mut luaL_Strbuf,
    size: usize
) -> *mut c_char
{
    luaL_buffinitsize(
        L,
        B,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_prepbuffsize(
    B: *mut luaL_Buffer,
    size: usize
) -> *mut c_char
{
    luaL_prepbuffsize(
        B,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_addlstring(
    B: *mut luaL_Strbuf,
    s: *const c_char,
    l: usize
)
{
    luaL_addlstring(
        B,
        s,
        l
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_addvalue(
    B: *mut luaL_Strbuf
)
{
    luaL_addvalue(
        B
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_addvalueany(
    B: *mut luaL_Strbuf,
    idx: c_int
)
{
    luaL_addvalueany(
        B,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_pushresult(
    B: *mut luaL_Strbuf
)
{
    luaL_pushresult(
        B
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_pushresultsize(
    B: *mut luaL_Strbuf,
    size: usize
)
{
    luaL_pushresultsize(
        B,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_base(
    L: *mut lua_State
) -> c_int
{
    luaopen_base(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_coroutine(
    L: *mut lua_State
) -> c_int
{
    luaopen_coroutine(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_table(
    L: *mut lua_State
) -> c_int
{
    luaopen_table(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_os(
    L: *mut lua_State
) -> c_int
{
    luaopen_os(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_string(
    L: *mut lua_State
) -> c_int
{
    luaopen_string(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_bit32(
    L: *mut lua_State
) -> c_int
{
    luaopen_bit32(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_buffer(
    L: *mut lua_State
) -> c_int
{
    luaopen_buffer(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_utf8(
    L: *mut lua_State
) -> c_int
{
    luaopen_utf8(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_math(
    L: *mut lua_State
) -> c_int
{
    luaopen_math(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_debug(
    L: *mut lua_State
) -> c_int
{
    luaopen_debug(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaopen_vector(
    L: *mut lua_State
) -> c_int
{
    luaopen_vector(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_openlibs(
    L: *mut lua_State
)
{
    luaL_openlibs(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_sandbox(
    L: *mut lua_State
)
{
    luaL_sandbox(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luaL_sandboxthread(
    L: *mut lua_State
)
{
    luaL_sandboxthread(
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luau_compile(
    source: *const c_char,
    size: usize,
    options: *mut lua_CompileOptions,
    outsize: *mut usize
) -> *mut c_char
{
    luau_compile(
        source,
        size,
        options,
        outsize
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luau_set_compile_constant_nil(
    constant: *mut lua_CompileConstant
)
{
    luau_set_compile_constant_nil(
        constant
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luau_set_compile_constant_boolean(
    constant: *mut lua_CompileConstant,
    b: c_int
)
{
    luau_set_compile_constant_boolean(
        constant,
        b
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luau_set_compile_constant_number(
    constant: *mut lua_CompileConstant,
    n: f64
)
{
    luau_set_compile_constant_number(
        constant,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luau_set_compile_constant_vector(
    constant: *mut lua_CompileConstant,
    x: f32,
    y: f32,
    z: f32,
    w: f32
)
{
    luau_set_compile_constant_vector(
        constant,
        x,
        y,
        z,
        w
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_luau_set_compile_constant_string(
    constant: *mut lua_CompileConstant,
    s: *const c_char,
    l: usize
)
{
    luau_set_compile_constant_string(
        constant,
        s,
        l
    )
}

    