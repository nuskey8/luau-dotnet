
using luarequire_pushrequire_config_init_delegate = Luau.Native.luarequire_Configuration_init;     
using luaopen_require_config_init_delegate = Luau.Native.luarequire_Configuration_init;    
using luarequire_pushproxyrequire_config_init_delegate = Luau.Native.luarequire_Configuration_init;   

// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace Luau.Native
{
    public static unsafe partial class NativeMethods
    {




        [DllImport(__DllName, EntryPoint = "ffi_luarequire_pushrequire", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luarequire_pushrequire(lua_State* L, luarequire_pushrequire_config_init_delegate config_init, void* ctx);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_require", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaopen_require(lua_State* L, luaopen_require_config_init_delegate config_init, void* ctx);

        [DllImport(__DllName, EntryPoint = "ffi_luarequire_pushproxyrequire", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luarequire_pushproxyrequire(lua_State* L, luarequire_pushproxyrequire_config_init_delegate config_init, void* ctx);

        [DllImport(__DllName, EntryPoint = "ffi_luarequire_registermodule", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luarequire_registermodule(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luarequire_clearcacheentry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luarequire_clearcacheentry(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luarequire_clearcache", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luarequire_clearcache(lua_State* L);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct luarequire_Configuration
    {
        public void* is_require_allowed;
        public void* reset;
        public void* jump_to_alias;
        public void* to_parent;
        public void* to_child;
        public void* is_module_present;
        public void* get_chunkname;
        public void* get_loadname;
        public void* get_cache_key;
        public void* is_config_present;
        public void* get_alias;
        public void* get_config;
        public void* load;
    }



}
