
using lua_newstate_f_delegate = Luau.Native.lua_Alloc;
using lua_pushcclosurek_fn__delegate = Luau.Native.lua_CFunction;
using lua_tocfunction_return_delegate = Luau.Native.lua_CFunction;
using lua_pushcclosurek_cont_delegate = Luau.Native.lua_Continuation;
using lua_setuserdatadtor_dtor_delegate = Luau.Native.lua_Destructor;
using lua_getuserdatadtor_return_delegate = Luau.Native.lua_Destructor;
using lua_getallocf_return_delegate = Luau.Native.lua_Alloc;
using lua_getcoverage_callback_delegate = Luau.Native.lua_Coverage;

// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace Luau.Native
{
    public static unsafe partial class NativeMethods
    {
#if UNITY_IOS && !UNITY_EDITOR
        const string __DllName = "__Internal";
#else
        const string __DllName = "libluau";
#endif
        

        public const uint LUA_USE_LONGJMP = 0;
        public const uint LUA_IDSIZE = 256;
        public const uint LUA_MINSTACK = 20;
        public const uint LUAI_MAXCSTACK = 8000;
        public const uint LUAI_MAXCALLS = 20000;
        public const uint LUAI_MAXCCALLS = 200;
        public const uint LUA_BUFFERSIZE = 512;
        public const uint LUA_UTAG_LIMIT = 128;
        public const uint LUA_LUTAG_LIMIT = 128;
        public const uint LUA_SIZECLASSES = 40;
        public const uint LUA_MEMORY_CATEGORIES = 256;
        public const uint LUA_MINSTRTABSIZE = 32;
        public const uint LUA_MAXCAPTURES = 32;
        public const uint LUA_VECTOR_SIZE = 3;
        public const uint LUA_EXTRA_SIZE = 1;
        public const uint LUA_REFNIL = 0;
        public static ReadOnlySpan<byte> LUA_COLIBNAME => new byte[] { 99, 111, 114, 111, 117, 116, 105, 110, 101, 0 };
        public static ReadOnlySpan<byte> LUA_TABLIBNAME => new byte[] { 116, 97, 98, 108, 101, 0 };
        public static ReadOnlySpan<byte> LUA_OSLIBNAME => new byte[] { 111, 115, 0 };
        public static ReadOnlySpan<byte> LUA_STRLIBNAME => new byte[] { 115, 116, 114, 105, 110, 103, 0 };
        public static ReadOnlySpan<byte> LUA_BITLIBNAME => new byte[] { 98, 105, 116, 51, 50, 0 };
        public static ReadOnlySpan<byte> LUA_BUFFERLIBNAME => new byte[] { 98, 117, 102, 102, 101, 114, 0 };
        public static ReadOnlySpan<byte> LUA_UTF8LIBNAME => new byte[] { 117, 116, 102, 56, 0 };
        public static ReadOnlySpan<byte> LUA_MATHLIBNAME => new byte[] { 109, 97, 116, 104, 0 };
        public static ReadOnlySpan<byte> LUA_DBLIBNAME => new byte[] { 100, 101, 98, 117, 103, 0 };
        public static ReadOnlySpan<byte> LUA_VECLIBNAME => new byte[] { 118, 101, 99, 116, 111, 114, 0 };


        [DllImport(__DllName, EntryPoint = "ffi_lua_newstate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_State* lua_newstate(lua_newstate_f_delegate f, void* ud);

        [DllImport(__DllName, EntryPoint = "ffi_lua_close", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_close(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_newthread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_State* lua_newthread(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_mainthread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_State* lua_mainthread(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_resetthread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_resetthread(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_isthreadreset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_isthreadreset(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_absindex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_absindex(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_gettop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_gettop(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_settop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_settop(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushvalue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushvalue(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_remove(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_insert", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_insert(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_replace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_replace(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_checkstack", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_checkstack(lua_State* L, int sz);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawcheckstack", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_rawcheckstack(lua_State* L, int sz);

        [DllImport(__DllName, EntryPoint = "ffi_lua_xmove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_xmove(lua_State* from, lua_State* to, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_xpush", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_xpush(lua_State* from, lua_State* to, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_isnumber", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_isnumber(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_isstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_isstring(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_iscfunction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_iscfunction(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_isLfunction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_isLfunction(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_isuserdata", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_isuserdata(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_type(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_typename", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_typename(lua_State* L, int tp);

        [DllImport(__DllName, EntryPoint = "ffi_lua_equal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_equal(lua_State* L, int idx1, int idx2);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawequal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_rawequal(lua_State* L, int idx1, int idx2);

        [DllImport(__DllName, EntryPoint = "ffi_lua_lessthan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_lessthan(lua_State* L, int idx1, int idx2);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tonumberx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double lua_tonumberx(lua_State* L, int idx, int* isnum);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tointegerx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_tointegerx(lua_State* L, int idx, int* isnum);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tounsignedx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint lua_tounsignedx(lua_State* L, int idx, int* isnum);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tovector", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float* lua_tovector(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_toboolean", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_toboolean(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tolstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_tolstring(lua_State* L, int idx, nuint* len);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tostringatom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_tostringatom(lua_State* L, int idx, int* atom);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tolstringatom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_tolstringatom(lua_State* L, int idx, nuint* len, int* atom);

        [DllImport(__DllName, EntryPoint = "ffi_lua_namecallatom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_namecallatom(lua_State* L, int* atom);

        [DllImport(__DllName, EntryPoint = "ffi_lua_objlen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_objlen(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tocfunction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_tocfunction_return_delegate lua_tocfunction(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tolightuserdata", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_tolightuserdata(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tolightuserdatatagged", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_tolightuserdatatagged(lua_State* L, int idx, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_touserdata", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_touserdata(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_touserdatatagged", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_touserdatatagged(lua_State* L, int idx, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_userdatatag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_userdatatag(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_lightuserdatatag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_lightuserdatatag(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tothread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_State* lua_tothread(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_tobuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_tobuffer(lua_State* L, int idx, nuint* len);

        [DllImport(__DllName, EntryPoint = "ffi_lua_topointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_topointer(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushnil", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushnil(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushnumber", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushnumber(lua_State* L, double n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushinteger", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushinteger(lua_State* L, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushunsigned", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushunsigned(lua_State* L, uint n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushvector", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushvector(lua_State* L, float x, float y, float z);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushlstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushlstring(lua_State* L, byte* s, nuint l);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushstring(lua_State* L, byte* s);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushvfstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_pushvfstring(lua_State* L, byte* fmt, byte* argp);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushfstringL", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_pushfstringL(lua_State* L, byte* fmt);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushcclosurek", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushcclosurek(lua_State* L, lua_pushcclosurek_fn__delegate fn_, byte* debugname, int nup, lua_pushcclosurek_cont_delegate cont);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushboolean", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushboolean(lua_State* L, int b);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushthread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_pushthread(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pushlightuserdatatagged", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_pushlightuserdatatagged(lua_State* L, void* p, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_newuserdatatagged", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_newuserdatatagged(lua_State* L, nuint sz, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_newuserdatataggedwithmetatable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_newuserdatataggedwithmetatable(lua_State* L, nuint sz, int tag);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void lua_newuserdatadtor_dtor_delegate(void* arg1);

        [DllImport(__DllName, EntryPoint = "ffi_lua_newuserdatadtor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_newuserdatadtor(lua_State* L, nuint sz, lua_newuserdatadtor_dtor_delegate dtor);

        [DllImport(__DllName, EntryPoint = "ffi_lua_newbuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_newbuffer(lua_State* L, nuint sz);

        [DllImport(__DllName, EntryPoint = "ffi_lua_gettable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_gettable(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getfield", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_getfield(lua_State* L, int idx, byte* k);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawgetfield", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_rawgetfield(lua_State* L, int idx, byte* k);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawget", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_rawget(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawgeti", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_rawgeti(lua_State* L, int idx, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_createtable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_createtable(lua_State* L, int narr, int nrec);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setreadonly", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setreadonly(lua_State* L, int idx, int enabled);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getreadonly", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_getreadonly(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setsafeenv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setsafeenv(lua_State* L, int idx, int enabled);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getmetatable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_getmetatable(lua_State* L, int objindex);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getfenv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_getfenv(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_settable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_settable(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setfield", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setfield(lua_State* L, int idx, byte* k);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawsetfield", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_rawsetfield(lua_State* L, int idx, byte* k);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_rawset(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawseti", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_rawseti(lua_State* L, int idx, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setmetatable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_setmetatable(lua_State* L, int objindex);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setfenv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_setfenv(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_luau_load", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luau_load(lua_State* L, byte* chunkname, byte* data, nuint size, int env);

        [DllImport(__DllName, EntryPoint = "ffi_lua_call", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_call(lua_State* L, int nargs, int nresults);

        [DllImport(__DllName, EntryPoint = "ffi_lua_pcall", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_pcall(lua_State* L, int nargs, int nresults, int errfunc);

        [DllImport(__DllName, EntryPoint = "ffi_lua_yield", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_yield(lua_State* L, int nresults);

        [DllImport(__DllName, EntryPoint = "ffi_lua_break", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_break(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_resume", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_resume(lua_State* L, lua_State* from, int narg);

        [DllImport(__DllName, EntryPoint = "ffi_lua_resumeerror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_resumeerror(lua_State* L, lua_State* from);

        [DllImport(__DllName, EntryPoint = "ffi_lua_status", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_status(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_isyieldable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_isyieldable(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getthreaddata", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lua_getthreaddata(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setthreaddata", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setthreaddata(lua_State* L, void* data);

        [DllImport(__DllName, EntryPoint = "ffi_lua_costatus", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_costatus(lua_State* L, lua_State* co);

        [DllImport(__DllName, EntryPoint = "ffi_lua_gc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_gc(lua_State* L, int what, int data);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setmemcat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setmemcat(lua_State* L, int category);

        [DllImport(__DllName, EntryPoint = "ffi_lua_totalbytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint lua_totalbytes(lua_State* L, int category);

        [DllImport(__DllName, EntryPoint = "ffi_lua_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_next(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_rawiter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_rawiter(lua_State* L, int idx, int iter);

        [DllImport(__DllName, EntryPoint = "ffi_lua_concat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_concat(lua_State* L, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_encodepointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint lua_encodepointer(lua_State* L, nuint p);

        [DllImport(__DllName, EntryPoint = "ffi_lua_clock", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double lua_clock();

        [DllImport(__DllName, EntryPoint = "ffi_lua_setuserdatatag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setuserdatatag(lua_State* L, int idx, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setuserdatadtor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setuserdatadtor(lua_State* L, int tag, lua_setuserdatadtor_dtor_delegate dtor);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getuserdatadtor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_getuserdatadtor_return_delegate lua_getuserdatadtor(lua_State* L, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setuserdatametatable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setuserdatametatable(lua_State* L, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getuserdatametatable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_getuserdatametatable(lua_State* L, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setlightuserdataname", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_setlightuserdataname(lua_State* L, int tag, byte* name);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getlightuserdataname", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_getlightuserdataname(lua_State* L, int tag);

        [DllImport(__DllName, EntryPoint = "ffi_lua_clonefunction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_clonefunction(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_cleartable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_cleartable(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_clonetable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_clonetable(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getallocf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_getallocf_return_delegate lua_getallocf(lua_State* L, void** ud);

        [DllImport(__DllName, EntryPoint = "ffi_lua_ref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_ref(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_lua_unref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_unref(lua_State* L, int ref_);

        [DllImport(__DllName, EntryPoint = "ffi_lua_stackdepth", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_stackdepth(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getinfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_getinfo(lua_State* L, int level, byte* what, lua_Debug* ar);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getargument", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_getargument(lua_State* L, int level, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getlocal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_getlocal(lua_State* L, int level, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setlocal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_setlocal(lua_State* L, int level, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getupvalue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_getupvalue(lua_State* L, int funcindex, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_setupvalue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_setupvalue(lua_State* L, int funcindex, int n);

        [DllImport(__DllName, EntryPoint = "ffi_lua_singlestep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_singlestep(lua_State* L, int enabled);

        [DllImport(__DllName, EntryPoint = "ffi_lua_breakpoint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int lua_breakpoint(lua_State* L, int funcindex, int line, int enabled);

        [DllImport(__DllName, EntryPoint = "ffi_lua_getcoverage", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void lua_getcoverage(lua_State* L, int funcindex, void* context, lua_getcoverage_callback_delegate callback);

        [DllImport(__DllName, EntryPoint = "ffi_lua_debugtrace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* lua_debugtrace(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_lua_callbacks", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_Callbacks* lua_callbacks(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_register", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_register(lua_State* L, byte* libname, luaL_Reg* l);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_getmetafield", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_getmetafield(lua_State* L, int obj, byte* e);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_callmeta", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_callmeta(lua_State* L, int obj, byte* e);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checklstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* luaL_checklstring(lua_State* L, int numArg, nuint* l);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_optlstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* luaL_optlstring(lua_State* L, int numArg, byte* def, nuint* l);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checknumber", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double luaL_checknumber(lua_State* L, int numArg);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_optnumber", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double luaL_optnumber(lua_State* L, int nArg, double def);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkboolean", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_checkboolean(lua_State* L, int narg);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_optboolean", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_optboolean(lua_State* L, int narg, int def);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkinteger", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_checkinteger(lua_State* L, int numArg);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_optinteger", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_optinteger(lua_State* L, int nArg, int def);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkunsigned", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint luaL_checkunsigned(lua_State* L, int numArg);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_optunsigned", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint luaL_optunsigned(lua_State* L, int numArg, uint def);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkvector", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float* luaL_checkvector(lua_State* L, int narg);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_optvector", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float* luaL_optvector(lua_State* L, int narg, float* def);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkstack", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_checkstack(lua_State* L, int sz, byte* msg);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checktype", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_checktype(lua_State* L, int narg, int t);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkany", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_checkany(lua_State* L, int narg);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_newmetatable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_newmetatable(lua_State* L, byte* tname);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkudata", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* luaL_checkudata(lua_State* L, int ud, byte* tname);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkbuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* luaL_checkbuffer(lua_State* L, int narg, nuint* len);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_where", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_where(lua_State* L, int lvl);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_checkoption", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_checkoption(lua_State* L, int narg, byte* def, byte** lst);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_tolstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* luaL_tolstring(lua_State* L, int idx, nuint* len);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_newstate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern lua_State* luaL_newstate();

        [DllImport(__DllName, EntryPoint = "ffi_luaL_findtable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* luaL_findtable(lua_State* L, int idx, byte* fname, int szhint);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_typename", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* luaL_typename(lua_State* L, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_callyieldable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaL_callyieldable(lua_State* L, int nargs, int nresults);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_buffinit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_buffinit(lua_State* L, luaL_Strbuf* B);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_buffinitsize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* luaL_buffinitsize(lua_State* L, luaL_Strbuf* B, nuint size);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_prepbuffsize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* luaL_prepbuffsize(luaL_Strbuf* B, nuint size);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_addlstring", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_addlstring(luaL_Strbuf* B, byte* s, nuint l);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_addvalue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_addvalue(luaL_Strbuf* B);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_addvalueany", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_addvalueany(luaL_Strbuf* B, int idx);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_pushresult", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_pushresult(luaL_Strbuf* B);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_pushresultsize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_pushresultsize(luaL_Strbuf* B, nuint size);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_base", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_base(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_coroutine", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_coroutine(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_table", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_table(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_os", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_os(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_string(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_bit32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_bit32(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_buffer(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_utf8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_utf8(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_math", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_math(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_debug", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_debug(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaopen_vector", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int luaopen_vector(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_openlibs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_openlibs(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_sandbox", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_sandbox(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luaL_sandboxthread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luaL_sandboxthread(lua_State* L);

        [DllImport(__DllName, EntryPoint = "ffi_luau_compile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* luau_compile(byte* source, nuint size, lua_CompileOptions* options, nuint* outsize);

        [DllImport(__DllName, EntryPoint = "ffi_luau_set_compile_constant_nil", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luau_set_compile_constant_nil(void** constant);

        [DllImport(__DllName, EntryPoint = "ffi_luau_set_compile_constant_boolean", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luau_set_compile_constant_boolean(void** constant, int b);

        [DllImport(__DllName, EntryPoint = "ffi_luau_set_compile_constant_number", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luau_set_compile_constant_number(void** constant, double n);

        [DllImport(__DllName, EntryPoint = "ffi_luau_set_compile_constant_vector", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luau_set_compile_constant_vector(void** constant, float x, float y, float z, float w);

        [DllImport(__DllName, EntryPoint = "ffi_luau_set_compile_constant_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void luau_set_compile_constant_string(void** constant, byte* s, nuint l);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct lua_State
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct lua_Debug
    {
        public byte* name;
        public byte* what;
        public byte* source;
        public byte* short_src;
        public int linedefined;
        public int currentline;
        public byte nupvals;
        public byte nparams;
        public byte isvararg;
        public void* userdata;
        public fixed byte ssbuf[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct lua_Callbacks
    {
        public void* userdata;
        public void* interrupt;
        public void* panic;
        public void* userthread;
        public void* useratom;
        public void* debugbreak;
        public void* debugstep;
        public void* debuginterrupt;
        public void* debugprotectederror;
        public void* onallocate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct luaL_Reg
    {
        public byte* name;
        public void* func;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct luaL_Strbuf
    {
        public byte* p;
        public byte* end;
        public lua_State* L;
        public TString* storage;
        public fixed byte buffer[512];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct lua_CompileOptions
    {
        public int optimizationLevel;
        public int debugLevel;
        public int typeInfoLevel;
        public int coverageLevel;
        public byte* vectorLib;
        public byte* vectorCtor;
        public byte* vectorType;
        public byte** mutableGlobals;
        public byte** userdataTypes;
        public byte** librariesWithKnownMembers;
        public void* libraryMemberTypeCb;
        public void* libraryMemberConstantCb;
        public byte** disabledBuiltins;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct TString
    {
        public byte _address;
    }



}
